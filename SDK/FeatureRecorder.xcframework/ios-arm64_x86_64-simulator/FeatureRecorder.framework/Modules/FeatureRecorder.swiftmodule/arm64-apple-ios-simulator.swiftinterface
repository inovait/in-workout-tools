// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name FeatureRecorder
import Combine
import CommonModels
import ComposableArchitecture
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum FeatureRecorderAsset {
  public enum Assets {
    public static let accentColor: FeatureRecorder.FeatureRecorderColors
    public static let icBack: FeatureRecorder.FeatureRecorderImages
    public static let icDetailsTime: FeatureRecorder.FeatureRecorderImages
    public static let icDetailsVideo: FeatureRecorder.FeatureRecorderImages
    public static let icNext: FeatureRecorder.FeatureRecorderImages
    public static let icPause: FeatureRecorder.FeatureRecorderImages
    public static let icPrevious: FeatureRecorder.FeatureRecorderImages
    public static let muteButton: FeatureRecorder.FeatureRecorderImages
    public static let mutedButton: FeatureRecorder.FeatureRecorderImages
  }
  public enum PreviewAssets {
  }
}
@_hasMissingDesignatedInitializers final public class FeatureRecorderColors {
  final public var name: Swift.String {
    get
  }
  public typealias Color = UIKit.UIColor
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  final public var color: FeatureRecorder.FeatureRecorderColors.Color {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  final public var swiftUIColor: SwiftUI.Color {
    get
  }
  @objc deinit
}
extension UIKit.UIColor {
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  convenience public init?(asset: FeatureRecorder.FeatureRecorderColors)
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
extension SwiftUI.Color {
  public init(asset: FeatureRecorder.FeatureRecorderColors)
}
public struct FeatureRecorderImages {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: FeatureRecorder.FeatureRecorderImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  public var swiftUIImage: SwiftUI.Image {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
extension SwiftUI.Image {
  public init(asset: FeatureRecorder.FeatureRecorderImages)
  public init(asset: FeatureRecorder.FeatureRecorderImages, label: SwiftUI.Text)
  public init(decorative asset: FeatureRecorder.FeatureRecorderImages)
}
@_inheritsConvenienceInitializers @objc public class FeatureRecorderResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct IntermediateFileDependancy {
  public var prepare: (Swift.String) -> Swift.Void
  public var pause: (Foundation.Date) -> Swift.Void
  public var resume: (Foundation.Date) -> Swift.Void
  public var sessionStarted: (Foundation.Date, Swift.Int, Swift.String) -> Swift.Void
  public var sessionFinished: (Foundation.Date, Swift.Int, Swift.Int, Swift.String) -> Swift.Void
  public var roundStarted: (Foundation.Date, Swift.Int, Swift.Int, Swift.Bool, Swift.String) -> Swift.Void
  public var roundFinished: (Foundation.Date, Swift.Int, Swift.Int, Swift.Bool, Swift.String) -> Swift.Void
  public var end: (Foundation.Date, Swift.Int, Swift.Int) -> Swift.String
  public var removeAll: () -> Swift.Void
}
public struct IntermediateFileDependancyKey : Dependencies.DependencyKey {
  public static var liveValue: FeatureRecorder.IntermediateFileDependancy {
    get
  }
  public static var testValue: FeatureRecorder.IntermediateFileDependancy {
    get
  }
  public typealias Value = FeatureRecorder.IntermediateFileDependancy
}
extension Dependencies.DependencyValues {
  public var recordFile: FeatureRecorder.IntermediateFileDependancy {
    get
    set
  }
}
public enum IntermediateFileKeywords : Swift.String {
  case version
  case template
  case start
  case pause
  case resume
  case user
  case ping
  case impact
  case hrm
  case skipped
  case roundStart
  case roundEnd
  case sessionStart
  case sessionEnd
  case end
  case packId
  case skipBack
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StorageProvider {
  func removeAllFromDisk()
  func getWorkoutsFromDisk() -> [Foundation.URL]?
  func getIntermediateWorkoutsFromDisk() -> [Foundation.URL]?
  func removeWorkoutFromDisk(_ filePath: Foundation.URL)
}
public class StorageProviderImpl : FeatureRecorder.StorageProvider {
  public init()
  public func removeAllFromDisk()
  public func getWorkoutsFromDisk() -> [Foundation.URL]?
  public func getIntermediateWorkoutsFromDisk() -> [Foundation.URL]?
  public func removeWorkoutFromDisk(_ filePath: Foundation.URL)
  public static let builtWorkoutsFile: Foundation.URL
  @objc deinit
}
extension FeatureRecorder.IntermediateFileKeywords : Swift.Equatable {}
extension FeatureRecorder.IntermediateFileKeywords : Swift.Hashable {}
extension FeatureRecorder.IntermediateFileKeywords : Swift.RawRepresentable {}
