// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name FeatureExercise
import CommonModels
import CommonTca
import ComposableArchitecture
import DeveloperToolsSupport
import FeatureRecorder
import FeatureTime
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum FeatureExerciseAsset {
  public enum Assets {
    public static let accentColor: FeatureExercise.FeatureExerciseColors
    public static let icBack: FeatureExercise.FeatureExerciseImages
    public static let icDetailsTime: FeatureExercise.FeatureExerciseImages
    public static let icDetailsVideo: FeatureExercise.FeatureExerciseImages
    public static let icNext: FeatureExercise.FeatureExerciseImages
    public static let icPause: FeatureExercise.FeatureExerciseImages
    public static let icPrevious: FeatureExercise.FeatureExerciseImages
    public static let muteButton: FeatureExercise.FeatureExerciseImages
    public static let mutedButton: FeatureExercise.FeatureExerciseImages
  }
  public enum PreviewAssets {
  }
}
@_hasMissingDesignatedInitializers final public class FeatureExerciseColors {
  final public var name: Swift.String {
    get
  }
  public typealias Color = UIKit.UIColor
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  final public var color: FeatureExercise.FeatureExerciseColors.Color {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  final public var swiftUIColor: SwiftUI.Color {
    get
  }
  @objc deinit
}
extension UIKit.UIColor {
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  convenience public init?(asset: FeatureExercise.FeatureExerciseColors)
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
extension SwiftUI.Color {
  public init(asset: FeatureExercise.FeatureExerciseColors)
}
public struct FeatureExerciseImages {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: FeatureExercise.FeatureExerciseImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  public var swiftUIImage: SwiftUI.Image {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
extension SwiftUI.Image {
  public init(asset: FeatureExercise.FeatureExerciseImages)
  public init(asset: FeatureExercise.FeatureExerciseImages, label: SwiftUI.Text)
  public init(decorative asset: FeatureExercise.FeatureExerciseImages)
}
@_inheritsConvenienceInitializers @objc public class FeatureExerciseResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Double {
  public func toSeconds() -> Swift.Int
}
public struct ExerciseFeature : ComposableArchitecture.Reducer {
  public init()
  public struct State : Swift.Identifiable, Swift.Equatable {
    public let exercise: CommonModels.Exercise
    public var id: CommonModels.Exercise.ID {
      get
    }
    public var subExerciseIdx: Swift.Int
    public var subExerciseList: IdentifiedCollections.IdentifiedArrayOf<FeatureExercise.ExerciseFeature.State>
    public var subExerciseCurrentTime: Foundation.TimeInterval?
    public var subExerciseTotalIdx: Swift.Int
    public var currentTime: Foundation.TimeInterval
    public var runningSubExercise: CommonModels.Exercise?
    public var parentExerciseSkipped: Swift.Bool
    public var exerciseRepetitionCount: Swift.Int
    public init(exercise: CommonModels.Exercise, currentTime: Foundation.TimeInterval)
    public static func == (a: FeatureExercise.ExerciseFeature.State, b: FeatureExercise.ExerciseFeature.State) -> Swift.Bool
    public typealias ID = CommonModels.Exercise.ID
  }
  public enum Action : CommonTca.TCAFeatureAction, Swift.Equatable {
    public enum ViewAction : Swift.Equatable {
      public static func == (a: FeatureExercise.ExerciseFeature.Action.ViewAction, b: FeatureExercise.ExerciseFeature.Action.ViewAction) -> Swift.Bool
    }
    public enum DelegateAction : Swift.Equatable {
      case canceled([FeatureExercise.ExerciseFeature.State])
      case done(Foundation.TimeInterval)
      case previousExercise
      case elapsedTime(Foundation.TimeInterval, CommonModels.Exercise)
      case exerciseStarted(FeatureExercise.ExerciseFeature.State)
      case exerciseEnded(FeatureExercise.ExerciseFeature.State)
      case findFirstMedia(Swift.Bool)
      case firstMediaFound(CommonModels.Media, Swift.Bool)
      public static func == (a: FeatureExercise.ExerciseFeature.Action.DelegateAction, b: FeatureExercise.ExerciseFeature.Action.DelegateAction) -> Swift.Bool
    }
    public enum BusinessAction : Swift.Equatable {
      case start(isPrev: Swift.Bool? = nil)
      case pause
      case resume
      case next
      case previous
      case end
      case skip
      case cancel
      case clear
      case watch
      case elapsedTime
      indirect case subExerciseList(ComposableArchitecture.IdentifiedActionOf<FeatureExercise.ExerciseFeature>)
      public static func == (a: FeatureExercise.ExerciseFeature.Action.BusinessAction, b: FeatureExercise.ExerciseFeature.Action.BusinessAction) -> Swift.Bool
      public struct AllCasePaths {
        public var start: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Bool?> {
          get
        }
        public var pause: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var resume: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var next: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var previous: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var end: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var skip: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var cancel: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var clear: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var watch: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var elapsedTime: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, Swift.Void> {
          get
        }
        public var subExerciseList: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action.BusinessAction, ComposableArchitecture.IdentifiedActionOf<FeatureExercise.ExerciseFeature>> {
          get
        }
      }
      public static var allCasePaths: FeatureExercise.ExerciseFeature.Action.BusinessAction.AllCasePaths {
        get
      }
    }
    case view(FeatureExercise.ExerciseFeature.Action.ViewAction)
    case delegate(FeatureExercise.ExerciseFeature.Action.DelegateAction)
    case business(FeatureExercise.ExerciseFeature.Action.BusinessAction)
    public static func == (a: FeatureExercise.ExerciseFeature.Action, b: FeatureExercise.ExerciseFeature.Action) -> Swift.Bool
    public struct AllCasePaths {
      public var view: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action, FeatureExercise.ExerciseFeature.Action.ViewAction> {
        get
      }
      public var delegate: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action, FeatureExercise.ExerciseFeature.Action.DelegateAction> {
        get
      }
      public var business: CasePaths.AnyCasePath<FeatureExercise.ExerciseFeature.Action, FeatureExercise.ExerciseFeature.Action.BusinessAction> {
        get
      }
    }
    public static var allCasePaths: FeatureExercise.ExerciseFeature.Action.AllCasePaths {
      get
    }
  }
  public var body: some ComposableArchitecture.Reducer<FeatureExercise.ExerciseFeature.State, FeatureExercise.ExerciseFeature.Action> {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15FeatureExercise0bA0V4bodyQrvp", 0) __
}
extension FeatureExercise.ExerciseFeature.Action.BusinessAction : CasePaths.CasePathable {
}
extension FeatureExercise.ExerciseFeature.Action : CasePaths.CasePathable {
}
