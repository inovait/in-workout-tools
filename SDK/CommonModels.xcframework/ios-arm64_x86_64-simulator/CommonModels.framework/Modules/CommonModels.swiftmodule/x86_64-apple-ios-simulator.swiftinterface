// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CommonModels
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Exercise : Swift.Identifiable, Swift.Equatable, Swift.Codable {
  public static func == (lhs: CommonModels.Exercise, rhs: CommonModels.Exercise) -> Swift.Bool
  public var subExercises: [CommonModels.Exercise]
  public var id: Swift.String
  public var name: Swift.String
  public var type: CommonModels.ExerciseType
  public var media: CommonModels.Media?
  public var durationInMillis: Foundation.TimeInterval?
  public var idx: Swift.Int
  public var exerciseRepetition: Swift.Int
  public var loopSubExercises: Swift.Bool
  public var canSkipExercise: Swift.Bool
  public var data: CommonModels.ExerciseData?
  public var parentNames: [Swift.String]
  public var hasParent: Swift.Bool
  public var isTopParent: Swift.Bool
  public init(id: Swift.String, name: Swift.String, type: CommonModels.ExerciseType, durationInMillis: Foundation.TimeInterval? = nil, idx: Swift.Int, exerciseRepetition: Swift.Int, data: CommonModels.ExerciseData?, loopSubExercises: Swift.Bool, canSkipExercise: Swift.Bool, subExercises: [CommonModels.Exercise], media: CommonModels.Media? = nil, parentNames: [Swift.String] = [], hasParent: Swift.Bool = false, isTopParent: Swift.Bool = false)
  public func leftTime(elapsedTimeInMillis: Foundation.TimeInterval) -> Foundation.TimeInterval
  public func totalDuration() -> Foundation.TimeInterval
  public func hasSubExercises() -> Swift.Bool
  public func hasDuration() -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CommonModels.Exercise {
  public func decodeExerciseData<T>(_ type: T.Type) throws -> T? where T : Swift.Decodable
  public func buildHierarchy(parentNames: [Swift.String] = []) -> CommonModels.Exercise
}
public enum ExerciseType : Swift.CaseIterable, Swift.Codable {
  case exercise
  case rest
  public static func == (a: CommonModels.ExerciseType, b: CommonModels.ExerciseType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [CommonModels.ExerciseType]
  public static var allCases: [CommonModels.ExerciseType] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ExerciseData : Swift.Codable, Swift.Hashable, Swift.Equatable {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case array([CommonModels.ExerciseData])
  case dictionary([Swift.String : CommonModels.ExerciseData])
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CommonModels.ExerciseData, b: CommonModels.ExerciseData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Gender : Swift.Codable {
  case male
  case female
  case undisclosed
  public var value: Swift.String {
    get
  }
  public static func fromString(_ stringValue: Swift.String?) -> CommonModels.Gender?
  public static func == (a: CommonModels.Gender, b: CommonModels.Gender) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum IntermediateFileKeywords : Swift.String {
  case version
  case template
  case start
  case pause
  case resume
  case user
  case ping
  case impact
  case hrm
  case skipped
  case roundStart
  case roundEnd
  case sessionStart
  case sessionEnd
  case end
  case packId
  case skipBack
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Media : Swift.Equatable, Swift.Identifiable, Swift.Codable, Swift.Hashable {
  public let id: Foundation.UUID
  public let height: CoreFoundation.CGFloat?
  public let width: CoreFoundation.CGFloat?
  public let duration: CoreFoundation.CGFloat?
  public let type: Swift.String
  public let mimeType: CommonModels.Media.MimeType
  public let loopVideo: Swift.Bool?
  public var name: Swift.String?
  public var url: Foundation.URL?
  public init(url: Foundation.URL?, height: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, duration: CoreFoundation.CGFloat? = nil, type: Swift.String, loopVideo: Swift.Bool? = nil, name: Swift.String? = nil)
  public enum MimeType : Swift.String, Swift.Codable, Swift.Equatable {
    case jpg
    case gif
    case jpeg
    case png
    case webp
    case image
    case mp4
    case mov
    case quicktime
    public var isImage: Swift.Bool {
      get
    }
    public var isVideo: Swift.Bool {
      get
    }
    public var `extension`: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func == (a: CommonModels.Media, b: CommonModels.Media) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct RecordedWorkout : Swift.Equatable {
  public let timestamp: Foundation.TimeInterval
  public let duration: Swift.Int
  public let name: Swift.String
  public let url: Foundation.URL?
  public let breakdown: [CommonModels.RecordedBreakdownItem]
  public init(timestamp: Foundation.TimeInterval, duration: Swift.Int, name: Swift.String, breakdown: [CommonModels.RecordedBreakdownItem], url: Foundation.URL? = nil)
  public var mappedHistoryExercise: CommonModels.Exercise {
    get
  }
  public var exercisesDisplay: Swift.String {
    get
  }
  public static func == (a: CommonModels.RecordedWorkout, b: CommonModels.RecordedWorkout) -> Swift.Bool
}
public struct RecordedBreakdownItem : Swift.Equatable, Swift.Hashable {
  public let roundIdx: Swift.Int?
  public let timestamp: Swift.Int
  public let type: CommonModels.RecordedBreakdownType
  public let duration: Swift.Int
  public let exerciseName: Swift.String?
  public let numOfSubexercises: Swift.Int?
  public let isTopParent: Swift.Bool?
  public init(roundIdx: Swift.Int?, timestamp: Swift.Int, type: CommonModels.RecordedBreakdownType, duration: Swift.Int, exerciseName: Swift.String?, numOfSubexercises: Swift.Int? = nil, isTopParent: Swift.Bool? = nil)
  public static func == (a: CommonModels.RecordedBreakdownItem, b: CommonModels.RecordedBreakdownItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RecordedBreakdownType : Swift.Equatable {
  case start
  case sessionStarted
  case sessionEnded
  case roundStarted
  case roundEnded
  case stop
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CommonModels.RecordedBreakdownType, b: CommonModels.RecordedBreakdownType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array where Element == CommonModels.RecordedBreakdownItem {
  public func toExercises() -> [CommonModels.Exercise]
}
extension Swift.Int {
  public func toMillis() -> Foundation.TimeInterval
}
extension CommonModels.RecordedWorkout {
  public static func fromUrl(url: Foundation.URL, name: Swift.String) -> CommonModels.RecordedWorkout?
}
public enum WorkoutStatus {
  case none
  case started
  case paused
  case ended
  public static func == (a: CommonModels.WorkoutStatus, b: CommonModels.WorkoutStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CommonModels.ExerciseType : Swift.Equatable {}
extension CommonModels.ExerciseType : Swift.Hashable {}
extension CommonModels.Gender : Swift.Equatable {}
extension CommonModels.Gender : Swift.Hashable {}
extension CommonModels.IntermediateFileKeywords : Swift.Equatable {}
extension CommonModels.IntermediateFileKeywords : Swift.Hashable {}
extension CommonModels.IntermediateFileKeywords : Swift.RawRepresentable {}
extension CommonModels.Media.MimeType : Swift.Hashable {}
extension CommonModels.Media.MimeType : Swift.RawRepresentable {}
extension CommonModels.RecordedBreakdownType : Swift.Hashable {}
extension CommonModels.WorkoutStatus : Swift.Equatable {}
extension CommonModels.WorkoutStatus : Swift.Hashable {}
