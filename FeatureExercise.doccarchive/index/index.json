{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/init(exercise:currenttime:)","title":"init(exercise: Exercise, currentTime: TimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/currenttime","title":"var currentTime: TimeInterval","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/exercise","title":"let exercise: Exercise","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/exerciserepetitioncount","title":"var exerciseRepetitionCount: Int","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/id","title":"var id: Exercise.ID","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/parentexerciseskipped","title":"var parentExerciseSkipped: Bool","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/subexerciseidx","title":"var subExerciseIdx: Int","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/subexerciselist","title":"var subExerciseList: IdentifiedArrayOf<ExerciseFeature.State>","type":"property"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/subexercisetotalidx","title":"var subExerciseTotalIdx: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/state\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureexercise\/exercisefeature\/state\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature\/state","title":"ExerciseFeature.State","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/body","title":"var body: some Reducer<State, Action>","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/business(_:)","title":"case business(BusinessAction)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegate(_:)","title":"case delegate(DelegateAction)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/view(_:)","title":"case view(ViewAction)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/cancel","title":"case cancel","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/clear","title":"case clear","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/elapsedtime","title":"case elapsedTime","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/end","title":"case end","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/next","title":"case next","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/pause","title":"case pause","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/previous","title":"case previous","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/resume","title":"case resume","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/skip","title":"case skip","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/start(isprev:)","title":"case start(isPrev: Bool?)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/subexerciselist(_:)","title":"case subExerciseList(IdentifiedActionOf<ExerciseFeature>)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/watch","title":"case watch","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/is(_:)","title":"func `is`(PartialCaseKeyPath<Self>) -> Bool","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/subscript(case:)","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/subscript(dynamicmember:)-29in0","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value?","type":"subscript"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/subscript(dynamicmember:)-6cs78","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/cases","title":"ExerciseFeature.Action.BusinessAction.Cases","type":"typealias"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/casepathable-implementations","title":"CasePathable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/businessaction","title":"ExerciseFeature.Action.BusinessAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/canceled(_:)","title":"case canceled([ExerciseFeature.State])","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/done(_:)","title":"case done(TimeInterval)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/elapsedtime(_:_:)","title":"case elapsedTime(TimeInterval, Exercise)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/exerciseended(_:)","title":"case exerciseEnded(ExerciseFeature.State)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/exercisestarted(_:)","title":"case exerciseStarted(ExerciseFeature.State)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/findfirstmedia(_:)","title":"case findFirstMedia(Bool)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/firstmediafound(_:_:)","title":"case firstMediaFound(Media, Bool)","type":"case"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/previousexercise","title":"case previousExercise","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/delegateaction","title":"ExerciseFeature.Action.DelegateAction","type":"enum"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/viewaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/viewaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/viewaction","title":"ExerciseFeature.Action.ViewAction","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/is(_:)","title":"func `is`(PartialCaseKeyPath<Self>) -> Bool","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/subscript(case:)","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/subscript(dynamicmember:)-75pse","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value","type":"subscript"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/subscript(dynamicmember:)-9u6sy","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/cases","title":"ExerciseFeature.Action.Cases","type":"typealias"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/casepathable-implementations","title":"CasePathable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/action\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature\/action","title":"ExerciseFeature.Action","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/exercisefeature\/_printchanges(_:)","title":"func _printChanges(_ReducerPrinter<Self.State, Self.Action>?) -> _PrintChangesReducer<Self>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/dependency(_:)","title":"func dependency<Value>(Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/dependency(_:_:)","title":"func dependency<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/foreach(_:action:)","title":"func forEach<DestinationState, DestinationAction>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/foreach(_:action:destination:fileid:line:)-3mu03","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: AnyCasePath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _StackReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/foreach(_:action:destination:fileid:line:)-7ixo9","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _StackReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/foreach(_:action:element:fileid:line:)-80htw","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: CaseKeyPath<Self.Action, IdentifiedAction<ID, ElementAction>>, element: () -> Element, fileID: StaticString, line: UInt) -> _ForEachReducer<Self, ID, Element>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/foreach(_:action:element:fileid:line:)-8z7fc","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: AnyCasePath<Self.Action, (ID, ElementAction)>, element: () -> Element, fileID: StaticString, line: UInt) -> _ForEachReducer<Self, ID, Element>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/ifcaselet(_:action:then:fileid:line:)-8b1n4","title":"func ifCaseLet<CaseState, CaseAction, Case>(CaseKeyPath<Self.State, CaseState>, action: CaseKeyPath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, line: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/ifcaselet(_:action:then:fileid:line:)-8spvp","title":"func ifCaseLet<CaseState, CaseAction, Case>(AnyCasePath<Self.State, CaseState>, action: AnyCasePath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, line: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:)","title":"func ifLet<ChildState, ChildAction>(WritableKeyPath<Self.State, PresentationState<ChildState>>, action: CaseKeyPath<Self.Action, PresentationAction<ChildAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:destination:fileid:line:)-2ktjz","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:destination:fileid:line:)-bzwa","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:fileid:line:)-1q44m","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:fileid:line:)-2ak03","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:fileid:line:)-2h8g1","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, EmptyReducer<DestinationState, DestinationAction>>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:fileid:line:)-jdmo","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, EmptyReducer<DestinationState, DestinationAction>>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:then:fileid:line:)-1k89j","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, Wrapped>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/iflet(_:action:then:fileid:line:)-1uvgk","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, Wrapped>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/onchange(of:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/onchange(of:removeduplicates:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, removeDuplicates: (V, V) -> Bool, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/reduce(into:action:)","title":"func reduce(into: inout Self.Body.State, action: Self.Body.Action) -> Effect<Self.Body.Action>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/signpost(_:log:)","title":"func signpost(String, log: OSLog) -> _SignpostReducer<Self>","type":"method"},{"path":"\/documentation\/featureexercise\/exercisefeature\/transformdependency(_:transform:)","title":"func transformDependency<V>(WritableKeyPath<DependencyValues, V>, transform: (inout V) -> Void) -> _DependencyKeyWritingReducer<Self>","type":"method"}],"path":"\/documentation\/featureexercise\/exercisefeature\/reducer-implementations","title":"Reducer Implementations","type":"symbol"}],"path":"\/documentation\/featureexercise\/exercisefeature","title":"ExerciseFeature","type":"struct"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/swift\/double\/toseconds()","title":"func toSeconds() -> Int","type":"method"}],"path":"\/documentation\/featureexercise\/swift\/double","title":"Double","type":"extension"}],"path":"\/documentation\/featureexercise\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/swiftui\/color\/init(asset:)","title":"init(asset: FeatureExerciseColors)","type":"init"}],"path":"\/documentation\/featureexercise\/swiftui\/color","title":"Color","type":"extension"}],"path":"\/documentation\/featureexercise\/swiftui","title":"SwiftUI","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureexercise\/uikit\/uicolor\/init(asset:)","title":"init?(asset: FeatureExerciseColors)","type":"init"}],"path":"\/documentation\/featureexercise\/uikit\/uicolor","title":"UIColor","type":"extension"}],"path":"\/documentation\/featureexercise\/uikit","title":"UIKit","type":"extension"}],"path":"\/documentation\/featureexercise","title":"FeatureExercise","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}