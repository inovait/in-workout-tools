{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/init(roundidx:currentexercise:)","title":"init(roundIdx: Int, currentExercise: ExerciseFeature.State)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/currentexercise","title":"var currentExercise: ExerciseFeature.State","type":"property"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/isnextexercise","title":"var isNextExercise: Bool","type":"property"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/runningexercise","title":"var runningExercise: ExerciseFeature.State?","type":"property"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/showmedia","title":"var showMedia: Bool","type":"property"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/status","title":"var status: WorkoutStatus","type":"property"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/videofeature","title":"var videoFeature: VideoFeature.State","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/state\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutfeature\/state\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature\/state","title":"WorkoutFeature.State","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/body","title":"var body: some ReducerOf<`Self`>","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/business(_:)","title":"case business(BusinessAction)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegate(_:)","title":"case delegate(DelegateAction)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/view(_:)","title":"case view(ViewAction)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/currentexercise(_:)","title":"case currentExercise(ExerciseFeature.Action)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/done","title":"case done","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/item(_:)","title":"case item(IdentifiedActionOf<ExerciseFeature>)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/nextround","title":"case nextRound","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/pause","title":"case pause","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/prepare(_:)","title":"case prepare(String)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/previousround","title":"case previousRound","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/resume","title":"case resume","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/start","title":"case start","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/totaltime(_:)","title":"case totalTime(TimeInterval)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/videofeature(_:)","title":"case videoFeature(VideoFeature.Action)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/is(_:)","title":"func `is`(PartialCaseKeyPath<Self>) -> Bool","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/subscript(case:)","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/subscript(dynamicmember:)-730ie","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/subscript(dynamicmember:)-9q8tq","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/cases","title":"WorkoutFeature.Action.BusinessAction.Cases","type":"typealias"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/casepathable-implementations","title":"CasePathable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/businessaction","title":"WorkoutFeature.Action.BusinessAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/end","title":"case end","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/exerciseended(_:)","title":"case exerciseEnded(Exercise)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/exercisestarted(_:)","title":"case exerciseStarted(Exercise)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/timetick(_:)","title":"case timeTick(TimeInterval)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/delegateaction","title":"WorkoutFeature.Action.DelegateAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onend","title":"case onEnd","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onmutevideo","title":"case onMuteVideo","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onnextround","title":"case onNextRound","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onpause","title":"case onPause","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onprepare(_:)","title":"case onPrepare(String)","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onpreviousround","title":"case onPreviousRound","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onresume","title":"case onResume","type":"case"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/onstart","title":"case onStart","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/is(_:)","title":"func `is`(PartialCaseKeyPath<Self>) -> Bool","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/subscript(case:)","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/subscript(dynamicmember:)-4c0r","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value?","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/subscript(dynamicmember:)-8lzo1","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/cases","title":"WorkoutFeature.Action.ViewAction.Cases","type":"typealias"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/casepathable-implementations","title":"CasePathable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/viewaction","title":"WorkoutFeature.Action.ViewAction","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/is(_:)","title":"func `is`(PartialCaseKeyPath<Self>) -> Bool","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/subscript(case:)","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/subscript(dynamicmember:)-2vr2b","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value","type":"subscript"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/subscript(dynamicmember:)-3bmsx","title":"subscript<Value>(dynamicMember _: KeyPath<Self.AllCasePaths, AnyCasePath<Self, Value>>) -> Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/cases","title":"WorkoutFeature.Action.Cases","type":"typealias"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/casepathable-implementations","title":"CasePathable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/action\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature\/action","title":"WorkoutFeature.Action","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutfeature\/_printchanges(_:)","title":"func _printChanges(_ReducerPrinter<Self.State, Self.Action>?) -> _PrintChangesReducer<Self>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/dependency(_:)","title":"func dependency<Value>(Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/dependency(_:_:)","title":"func dependency<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/foreach(_:action:)","title":"func forEach<DestinationState, DestinationAction>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/foreach(_:action:destination:fileid:line:)-2v9tj","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: AnyCasePath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _StackReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/foreach(_:action:destination:fileid:line:)-9ayzw","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _StackReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/foreach(_:action:element:fileid:line:)-4a90z","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: CaseKeyPath<Self.Action, IdentifiedAction<ID, ElementAction>>, element: () -> Element, fileID: StaticString, line: UInt) -> _ForEachReducer<Self, ID, Element>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/foreach(_:action:element:fileid:line:)-85upa","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: AnyCasePath<Self.Action, (ID, ElementAction)>, element: () -> Element, fileID: StaticString, line: UInt) -> _ForEachReducer<Self, ID, Element>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/ifcaselet(_:action:then:fileid:line:)-4ac0i","title":"func ifCaseLet<CaseState, CaseAction, Case>(CaseKeyPath<Self.State, CaseState>, action: CaseKeyPath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, line: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/ifcaselet(_:action:then:fileid:line:)-rf2v","title":"func ifCaseLet<CaseState, CaseAction, Case>(AnyCasePath<Self.State, CaseState>, action: AnyCasePath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, line: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:)","title":"func ifLet<ChildState, ChildAction>(WritableKeyPath<Self.State, PresentationState<ChildState>>, action: CaseKeyPath<Self.Action, PresentationAction<ChildAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:destination:fileid:line:)-10bew","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:destination:fileid:line:)-520sh","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, Destination>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:fileid:line:)-4ut8c","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, EmptyReducer<DestinationState, DestinationAction>>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:fileid:line:)-7kkht","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, line: UInt) -> _PresentationReducer<Self, EmptyReducer<DestinationState, DestinationAction>>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:fileid:line:)-940c6","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:fileid:line:)-9nzxp","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:then:fileid:line:)-91wra","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, Wrapped>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/iflet(_:action:then:fileid:line:)-99z7d","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, line: UInt) -> _IfLetReducer<Self, Wrapped>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/onchange(of:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/onchange(of:removeduplicates:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, removeDuplicates: (V, V) -> Bool, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/reduce(into:action:)","title":"func reduce(into: inout Self.Body.State, action: Self.Body.Action) -> Effect<Self.Body.Action>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/signpost(_:log:)","title":"func signpost(String, log: OSLog) -> _SignpostReducer<Self>","type":"method"},{"path":"\/documentation\/featureworkout\/workoutfeature\/transformdependency(_:transform:)","title":"func transformDependency<V>(WritableKeyPath<DependencyValues, V>, transform: (inout V) -> Void) -> _DependencyKeyWritingReducer<Self>","type":"method"}],"path":"\/documentation\/featureworkout\/workoutfeature\/reducer-implementations","title":"Reducer Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutfeature","title":"WorkoutFeature","type":"struct"},{"path":"\/documentation\/featureworkout\/workouthelper","title":"WorkoutHelper","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutstatus\/ended","title":"case ended","type":"case"},{"path":"\/documentation\/featureworkout\/workoutstatus\/none","title":"case none","type":"case"},{"path":"\/documentation\/featureworkout\/workoutstatus\/paused","title":"case paused","type":"case"},{"path":"\/documentation\/featureworkout\/workoutstatus\/started","title":"case started","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/featureworkout\/workoutstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/featureworkout\/workoutstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/featureworkout\/workoutstatus","title":"WorkoutStatus","type":"enum"}],"path":"\/documentation\/featureworkout","title":"FeatureWorkout","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}